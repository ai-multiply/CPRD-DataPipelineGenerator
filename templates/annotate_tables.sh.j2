#!/bin/bash
#$ -cwd
#$ -j y
#$ -pe smp 1
#$ -l h_rt={{ grid_engine.runtime }}
#$ -l h_vmem={{ grid_engine.memory }}
#$ -t 1-{{ tables_to_process|length }}

set -e
module load parallel

export MAMBA_ACTIVATION="module load miniconda; mamba activate cprdpipeline; cd {{ scripts_dir }}"
scripts_folder={{ scripts_dir }}

TABLE_NAME=$(sed -n "${SGE_TASK_ID}p" {{ filelist_path }})
echo "Processing $TABLE_NAME" $(date)

cd {{ processed_data_folder }}/$TABLE_NAME

{% if table_configs %}
{% for table_name, config in table_configs.items() %}
if [[ "$TABLE_NAME" == "{{ table_name }}" ]]; then
    echo "Using input file: {{ table_input_files[table_name] }}"
    
    {% for column, col_config in config.items() %}
    echo "Processing annotations for column: {{ column }}" $(date)
    
    current_input="{{ table_input_files[table_name] }}"
    
    {% for codelist in col_config.codelists %}
    echo "Applying codelist {{ codelist.name }}" $(date)
    
    # Create header based on codelist format
    {% if codelist.format.column_count == 2 %}
    # For 2-column codelists (code, description only)
    head -n1 "$current_input" | awk 'BEGIN{RS="\r?\n"; FS=OFS="\t"} { 
        print $0, "{{ codelist.name }}_term"
    }' > header_{{ column }}_{{ codelist.name }}.txt

    # Prepare awk program for 2-column format
    awk_program='BEGIN{RS="\r?\n"; FS=OFS="\t"} 
    FNR==NR {
        term[$1]=$2
        next
    } 
    {
        print $0, term[${{ col_config.position }}]
    }'
    {% else %}
    # For 4-column codelists (code, description, count, flag)
    head -n1 "$current_input" | awk 'BEGIN{RS="\r?\n"; FS=OFS="\t"} { 
        print $0, "{{ codelist.name }}_term", "{{ codelist.name }}_count", "{{ codelist.name }}_flag"
    }' > header_{{ column }}_{{ codelist.name }}.txt

    # Prepare awk program for 4-column format
    awk_program='BEGIN{RS="\r?\n"; FS=OFS="\t"} 
    FNR==NR {
        term[$1]=$2
        count[$1]=$3
        flag[$1]=$4
        next
    } 
    {
        print $0, term[${{ col_config.position }}], count[${{ col_config.position }}], flag[${{ col_config.position }}]
    }'
    {% endif %}

    # Calculate split column based on format
    NCOLS=$(head -n1 "$current_input" | awk -F'\t' '{print NF}')
    SPLIT_COL=$((NCOLS + 1))  # First new column is always the term

    # Process data differently based on codelist format
    tail -n +2 "$current_input" > tmp_data.txt

    {% if codelist.format.column_count == 2 %}
    # For 2-column codelists, process directly without splitting
    parallel --pipepart -a tmp_data.txt \
        "$MAMBA_ACTIVATION; \
        awk '$awk_program' {{ codelist.path }} -" > tmp_output.txt

    # Combine results
    cat header_{{ column }}_{{ codelist.name }}.txt tmp_output.txt > annotated_{{ column }}_{{ codelist.name }}.txt
    rm -f header_{{ column }}_{{ codelist.name }}.txt tmp_output.txt
    {% else %}
    # For 4-column codelists, process and handle potential pipe-separated values
    parallel --pipepart -a tmp_data.txt \
        "$MAMBA_ACTIVATION; \
        awk '$awk_program' {{ codelist.path }} - > {{ processed_data_folder }}/$TABLE_NAME/part_{{ column }}_{{ codelist.name }}_{% raw %}{#}{% endraw %}.txt; \
        python $scripts_folder/split_rows.py $USER {{ processed_data_folder }}/$TABLE_NAME/part_{{ column }}_{{ codelist.name }}_{% raw %}{#}{% endraw %}.txt $SPLIT_COL"

    # Combine results
    cat header_{{ column }}_{{ codelist.name }}.txt > annotated_{{ column }}_{{ codelist.name }}.txt
    cat part_{{ column }}_{{ codelist.name }}_*.split >> annotated_{{ column }}_{{ codelist.name }}.txt

    # Cleanup split-related files
    rm -f header_{{ column }}_{{ codelist.name }}.txt part_{{ column }}_{{ codelist.name }}_*.txt part_{{ column }}_{{ codelist.name }}_*.split
    {% endif %}

    current_input="annotated_{{ column }}_{{ codelist.name }}.txt"
    {% endfor %}
    
    mv "$current_input" processed_{{ column }}.txt
    {% endfor %}

    first_col=$(ls processed_*.txt | head -n 1)
    mv "$first_col" s04_{{ table_name }}.txt
    rm -f processed_*.txt tmp_data.txt
fi
{% endfor %}
{% endif %}

echo "Finished $TABLE_NAME" $(date)