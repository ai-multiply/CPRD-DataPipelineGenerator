#!/bin/bash
#$ -cwd
#$ -j y
#$ -pe smp {{ grid_engine.cpus }}
#$ -l h_rt={{ grid_engine.runtime }}
#$ -l h_vmem={{ grid_engine.memory }}

module load parallel

echo "Beginning lookup conversion" $(date)

{% for table_name, table in tables.items() %}
{% if table.lookup_columns %}
echo "Processing {{ table_name }} lookups" $(date)
cd "{{ processed_data_folder }}/{{ table_name }}"

# First define all our awk programs using heredocs
# Each program will handle one type of lookup transformation
{% for col_name, lookup_file in table.lookup_columns.items() %}
read -r -d '' awk_{{ col_name }} << 'AWKEND'
BEGIN { FS=OFS="\t";RS="\r?\n" }
FNR==NR {
    map[$1]=$2
    next
}
{
    if (${{ col_positions[table_name][col_name] }} in map) {
        ${{ col_positions[table_name][col_name] }} = map[${{ col_positions[table_name][col_name] }}]
    }
    print $0
}
AWKEND
{% endfor %}

# Save the header first
head -n 1 {{ table_input_files[table_name] }} > s03_{{ table_name }}.txt

# Create data file without header for parallel processing
tail -n +2 {{ table_input_files[table_name] }} > tmp_{{ table_name }}.txt

# Process the data file in parallel through our lookup chain
parallel --pipepart -a tmp_{{ table_name }}.txt "awk '$awk_{{ table.lookup_columns.keys()|list|first }}' '{{ lookups_folder }}/{{ table.lookup_columns.values()|list|first }}' - {% for col_name, lookup_file in table.lookup_columns.items() %}{% if not loop.first %} | awk '$awk_{{ col_name }}' '{{ lookups_folder }}/{{ lookup_file }}' -{% endif %}{% endfor %}" >> s03_{{ table_name }}.txt

# Clean up our temporary file
rm tmp_{{ table_name }}.txt

echo "Finished {{ table_name }}" $(date)
{% endif %}
{% endfor %}

echo "Lookup conversion complete" $(date)